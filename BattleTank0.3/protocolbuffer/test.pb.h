// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace test {
class InterfaceMessage;
class InterfaceMessageDefaultTypeInternal;
extern InterfaceMessageDefaultTypeInternal _InterfaceMessage_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::InterfaceMessage* Arena::CreateMaybeMessage<::test::InterfaceMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

enum InterfaceMessage_InterfaceCode : int {
  InterfaceMessage_InterfaceCode_CREATE = 0,
  InterfaceMessage_InterfaceCode_UPDATE = 1,
  InterfaceMessage_InterfaceCode_DELETE = 2,
  InterfaceMessage_InterfaceCode_SET_TEXT = 3,
  InterfaceMessage_InterfaceCode_MINIMAP = 4,
  InterfaceMessage_InterfaceCode_ACKID = 5,
  InterfaceMessage_InterfaceCode_InterfaceMessage_InterfaceCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InterfaceMessage_InterfaceCode_InterfaceMessage_InterfaceCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InterfaceMessage_InterfaceCode_IsValid(int value);
constexpr InterfaceMessage_InterfaceCode InterfaceMessage_InterfaceCode_InterfaceCode_MIN = InterfaceMessage_InterfaceCode_CREATE;
constexpr InterfaceMessage_InterfaceCode InterfaceMessage_InterfaceCode_InterfaceCode_MAX = InterfaceMessage_InterfaceCode_ACKID;
constexpr int InterfaceMessage_InterfaceCode_InterfaceCode_ARRAYSIZE = InterfaceMessage_InterfaceCode_InterfaceCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceMessage_InterfaceCode_descriptor();
template<typename T>
inline const std::string& InterfaceMessage_InterfaceCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InterfaceMessage_InterfaceCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InterfaceMessage_InterfaceCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InterfaceMessage_InterfaceCode_descriptor(), enum_t_value);
}
inline bool InterfaceMessage_InterfaceCode_Parse(
    const std::string& name, InterfaceMessage_InterfaceCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InterfaceMessage_InterfaceCode>(
    InterfaceMessage_InterfaceCode_descriptor(), name, value);
}
enum InterfaceMessage_TypeObject : int {
  InterfaceMessage_TypeObject_Friendly = 0,
  InterfaceMessage_TypeObject_Enemy = 1,
  InterfaceMessage_TypeObject_Rock = 2,
  InterfaceMessage_TypeObject_Marker = 3,
  InterfaceMessage_TypeObject_Explosion = 4,
  InterfaceMessage_TypeObject_InterfaceMessage_TypeObject_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InterfaceMessage_TypeObject_InterfaceMessage_TypeObject_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InterfaceMessage_TypeObject_IsValid(int value);
constexpr InterfaceMessage_TypeObject InterfaceMessage_TypeObject_TypeObject_MIN = InterfaceMessage_TypeObject_Friendly;
constexpr InterfaceMessage_TypeObject InterfaceMessage_TypeObject_TypeObject_MAX = InterfaceMessage_TypeObject_Explosion;
constexpr int InterfaceMessage_TypeObject_TypeObject_ARRAYSIZE = InterfaceMessage_TypeObject_TypeObject_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceMessage_TypeObject_descriptor();
template<typename T>
inline const std::string& InterfaceMessage_TypeObject_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InterfaceMessage_TypeObject>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InterfaceMessage_TypeObject_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InterfaceMessage_TypeObject_descriptor(), enum_t_value);
}
inline bool InterfaceMessage_TypeObject_Parse(
    const std::string& name, InterfaceMessage_TypeObject* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InterfaceMessage_TypeObject>(
    InterfaceMessage_TypeObject_descriptor(), name, value);
}
// ===================================================================

class InterfaceMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.InterfaceMessage) */ {
 public:
  InterfaceMessage();
  virtual ~InterfaceMessage();

  InterfaceMessage(const InterfaceMessage& from);
  InterfaceMessage(InterfaceMessage&& from) noexcept
    : InterfaceMessage() {
    *this = ::std::move(from);
  }

  inline InterfaceMessage& operator=(const InterfaceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceMessage& operator=(InterfaceMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterfaceMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceMessage* internal_default_instance() {
    return reinterpret_cast<const InterfaceMessage*>(
               &_InterfaceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InterfaceMessage* other);
  friend void swap(InterfaceMessage& a, InterfaceMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InterfaceMessage* New() const final {
    return CreateMaybeMessage<InterfaceMessage>(nullptr);
  }

  InterfaceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterfaceMessage& from);
  void MergeFrom(const InterfaceMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.InterfaceMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InterfaceMessage_InterfaceCode InterfaceCode;
  static constexpr InterfaceCode CREATE =
    InterfaceMessage_InterfaceCode_CREATE;
  static constexpr InterfaceCode UPDATE =
    InterfaceMessage_InterfaceCode_UPDATE;
  static constexpr InterfaceCode DELETE =
    InterfaceMessage_InterfaceCode_DELETE;
  static constexpr InterfaceCode SET_TEXT =
    InterfaceMessage_InterfaceCode_SET_TEXT;
  static constexpr InterfaceCode MINIMAP =
    InterfaceMessage_InterfaceCode_MINIMAP;
  static constexpr InterfaceCode ACKID =
    InterfaceMessage_InterfaceCode_ACKID;
  static inline bool InterfaceCode_IsValid(int value) {
    return InterfaceMessage_InterfaceCode_IsValid(value);
  }
  static constexpr InterfaceCode InterfaceCode_MIN =
    InterfaceMessage_InterfaceCode_InterfaceCode_MIN;
  static constexpr InterfaceCode InterfaceCode_MAX =
    InterfaceMessage_InterfaceCode_InterfaceCode_MAX;
  static constexpr int InterfaceCode_ARRAYSIZE =
    InterfaceMessage_InterfaceCode_InterfaceCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InterfaceCode_descriptor() {
    return InterfaceMessage_InterfaceCode_descriptor();
  }
  template<typename T>
  static inline const std::string& InterfaceCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InterfaceCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InterfaceCode_Name.");
    return InterfaceMessage_InterfaceCode_Name(enum_t_value);
  }
  static inline bool InterfaceCode_Parse(const std::string& name,
      InterfaceCode* value) {
    return InterfaceMessage_InterfaceCode_Parse(name, value);
  }

  typedef InterfaceMessage_TypeObject TypeObject;
  static constexpr TypeObject Friendly =
    InterfaceMessage_TypeObject_Friendly;
  static constexpr TypeObject Enemy =
    InterfaceMessage_TypeObject_Enemy;
  static constexpr TypeObject Rock =
    InterfaceMessage_TypeObject_Rock;
  static constexpr TypeObject Marker =
    InterfaceMessage_TypeObject_Marker;
  static constexpr TypeObject Explosion =
    InterfaceMessage_TypeObject_Explosion;
  static inline bool TypeObject_IsValid(int value) {
    return InterfaceMessage_TypeObject_IsValid(value);
  }
  static constexpr TypeObject TypeObject_MIN =
    InterfaceMessage_TypeObject_TypeObject_MIN;
  static constexpr TypeObject TypeObject_MAX =
    InterfaceMessage_TypeObject_TypeObject_MAX;
  static constexpr int TypeObject_ARRAYSIZE =
    InterfaceMessage_TypeObject_TypeObject_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TypeObject_descriptor() {
    return InterfaceMessage_TypeObject_descriptor();
  }
  template<typename T>
  static inline const std::string& TypeObject_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TypeObject>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TypeObject_Name.");
    return InterfaceMessage_TypeObject_Name(enum_t_value);
  }
  static inline bool TypeObject_Parse(const std::string& name,
      TypeObject* value) {
    return InterfaceMessage_TypeObject_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string newString = 7;
  void clear_newstring();
  static const int kNewStringFieldNumber = 7;
  const std::string& newstring() const;
  void set_newstring(const std::string& value);
  void set_newstring(std::string&& value);
  void set_newstring(const char* value);
  void set_newstring(const char* value, size_t size);
  std::string* mutable_newstring();
  std::string* release_newstring();
  void set_allocated_newstring(std::string* newstring);

  // .test.InterfaceMessage.InterfaceCode code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::test::InterfaceMessage_InterfaceCode code() const;
  void set_code(::test::InterfaceMessage_InterfaceCode value);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Xposition = 3;
  void clear_xposition();
  static const int kXpositionFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 xposition() const;
  void set_xposition(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Yposition = 4;
  void clear_yposition();
  static const int kYpositionFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 yposition() const;
  void set_yposition(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Rotation = 5;
  void clear_rotation();
  static const int kRotationFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 rotation() const;
  void set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 hp = 6;
  void clear_hp();
  static const int kHpFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 color = 8;
  void clear_color();
  static const int kColorFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .test.InterfaceMessage.TypeObject type = 9;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::test::InterfaceMessage_TypeObject type() const;
  void set_type(::test::InterfaceMessage_TypeObject value);

  // @@protoc_insertion_point(class_scope:test.InterfaceMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newstring_;
  int code_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 xposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 yposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InterfaceMessage

// .test.InterfaceMessage.InterfaceCode code = 1;
inline void InterfaceMessage::clear_code() {
  code_ = 0;
}
inline ::test::InterfaceMessage_InterfaceCode InterfaceMessage::code() const {
  // @@protoc_insertion_point(field_get:test.InterfaceMessage.code)
  return static_cast< ::test::InterfaceMessage_InterfaceCode >(code_);
}
inline void InterfaceMessage::set_code(::test::InterfaceMessage_InterfaceCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:test.InterfaceMessage.code)
}

// int32 id = 2;
inline void InterfaceMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceMessage::id() const {
  // @@protoc_insertion_point(field_get:test.InterfaceMessage.id)
  return id_;
}
inline void InterfaceMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:test.InterfaceMessage.id)
}

// int32 Xposition = 3;
inline void InterfaceMessage::clear_xposition() {
  xposition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceMessage::xposition() const {
  // @@protoc_insertion_point(field_get:test.InterfaceMessage.Xposition)
  return xposition_;
}
inline void InterfaceMessage::set_xposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xposition_ = value;
  // @@protoc_insertion_point(field_set:test.InterfaceMessage.Xposition)
}

// int32 Yposition = 4;
inline void InterfaceMessage::clear_yposition() {
  yposition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceMessage::yposition() const {
  // @@protoc_insertion_point(field_get:test.InterfaceMessage.Yposition)
  return yposition_;
}
inline void InterfaceMessage::set_yposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  yposition_ = value;
  // @@protoc_insertion_point(field_set:test.InterfaceMessage.Yposition)
}

// int32 Rotation = 5;
inline void InterfaceMessage::clear_rotation() {
  rotation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceMessage::rotation() const {
  // @@protoc_insertion_point(field_get:test.InterfaceMessage.Rotation)
  return rotation_;
}
inline void InterfaceMessage::set_rotation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:test.InterfaceMessage.Rotation)
}

// int32 hp = 6;
inline void InterfaceMessage::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceMessage::hp() const {
  // @@protoc_insertion_point(field_get:test.InterfaceMessage.hp)
  return hp_;
}
inline void InterfaceMessage::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:test.InterfaceMessage.hp)
}

// string newString = 7;
inline void InterfaceMessage::clear_newstring() {
  newstring_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InterfaceMessage::newstring() const {
  // @@protoc_insertion_point(field_get:test.InterfaceMessage.newString)
  return newstring_.GetNoArena();
}
inline void InterfaceMessage::set_newstring(const std::string& value) {
  
  newstring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:test.InterfaceMessage.newString)
}
inline void InterfaceMessage::set_newstring(std::string&& value) {
  
  newstring_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test.InterfaceMessage.newString)
}
inline void InterfaceMessage::set_newstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newstring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test.InterfaceMessage.newString)
}
inline void InterfaceMessage::set_newstring(const char* value, size_t size) {
  
  newstring_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test.InterfaceMessage.newString)
}
inline std::string* InterfaceMessage::mutable_newstring() {
  
  // @@protoc_insertion_point(field_mutable:test.InterfaceMessage.newString)
  return newstring_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InterfaceMessage::release_newstring() {
  // @@protoc_insertion_point(field_release:test.InterfaceMessage.newString)
  
  return newstring_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InterfaceMessage::set_allocated_newstring(std::string* newstring) {
  if (newstring != nullptr) {
    
  } else {
    
  }
  newstring_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newstring);
  // @@protoc_insertion_point(field_set_allocated:test.InterfaceMessage.newString)
}

// int32 color = 8;
inline void InterfaceMessage::clear_color() {
  color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterfaceMessage::color() const {
  // @@protoc_insertion_point(field_get:test.InterfaceMessage.color)
  return color_;
}
inline void InterfaceMessage::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:test.InterfaceMessage.color)
}

// .test.InterfaceMessage.TypeObject type = 9;
inline void InterfaceMessage::clear_type() {
  type_ = 0;
}
inline ::test::InterfaceMessage_TypeObject InterfaceMessage::type() const {
  // @@protoc_insertion_point(field_get:test.InterfaceMessage.type)
  return static_cast< ::test::InterfaceMessage_TypeObject >(type_);
}
inline void InterfaceMessage::set_type(::test::InterfaceMessage_TypeObject value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:test.InterfaceMessage.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::test::InterfaceMessage_InterfaceCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::InterfaceMessage_InterfaceCode>() {
  return ::test::InterfaceMessage_InterfaceCode_descriptor();
}
template <> struct is_proto_enum< ::test::InterfaceMessage_TypeObject> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::InterfaceMessage_TypeObject>() {
  return ::test::InterfaceMessage_TypeObject_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
